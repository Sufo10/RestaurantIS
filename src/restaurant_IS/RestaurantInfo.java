/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package restaurant_IS;


import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sujan Chhetri Poudel
 */
public class RestaurantInfo extends javax.swing.JFrame {
    
    int checker=0;  
    // Creating ArrayList for ever column in Table 
    ArrayList<Integer> codeArray=new ArrayList<>();
    ArrayList<String> nameArray=new ArrayList<>();
    ArrayList<Integer> priceArray=new ArrayList<>();
    ArrayList<String> descArray=new ArrayList<>();
    ArrayList<String> timeArray=new ArrayList<>();
    /**
     * Creates new form Main
     */
    public RestaurantInfo(){
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mainPnl = new javax.swing.JPanel();
        mainNameLbl = new javax.swing.JLabel();
        addressNameLbl = new javax.swing.JLabel();
        managerRadioBtn = new javax.swing.JRadioButton();
        staffRadioBtn = new javax.swing.JRadioButton();
        userLbl = new javax.swing.JLabel();
        categoryCombo = new javax.swing.JComboBox<>();
        searchTxtFld = new javax.swing.JTextField();
        categoryLbl = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        tblPnl = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataTbl = new javax.swing.JTable();
        dataPnl = new javax.swing.JPanel();
        itemNameTxtField = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        rateTxtField = new javax.swing.JTextField();
        descriptionTxtField = new javax.swing.JTextField();
        timeTxtField = new javax.swing.JTextField();
        itemCodeTxtField = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPnl.setBackground(new java.awt.Color(3, 65, 98));

        mainNameLbl.setBackground(new java.awt.Color(255, 204, 0));
        mainNameLbl.setFont(new java.awt.Font("InaiMathi", 1, 36)); // NOI18N
        mainNameLbl.setForeground(new java.awt.Color(255, 204, 0));
        mainNameLbl.setText("Vibes Restuarant");

        addressNameLbl.setBackground(new java.awt.Color(255, 255, 255));
        addressNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        addressNameLbl.setText("Sankhamul,Kathmandu");

        managerRadioBtn.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(managerRadioBtn);
        managerRadioBtn.setForeground(new java.awt.Color(255, 204, 0));
        managerRadioBtn.setText("Manager");

        staffRadioBtn.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(staffRadioBtn);
        staffRadioBtn.setForeground(new java.awt.Color(255, 255, 255));
        staffRadioBtn.setText("Staff Member");

        userLbl.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        userLbl.setForeground(new java.awt.Color(255, 255, 255));
        userLbl.setText("User Type:");

        categoryCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Starter", "Main Course", "Vibes Special", "Desert", "Beverages" }));
        categoryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboActionPerformed(evt);
            }
        });

        searchTxtFld.setText("Search for food by price...");
        searchTxtFld.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Mou(evt);
            }
        });
        searchTxtFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTxtFldKeyPressed(evt);
            }
        });

        categoryLbl.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        categoryLbl.setForeground(new java.awt.Color(255, 255, 255));
        categoryLbl.setText("Category");

        searchBtn.setBackground(new java.awt.Color(255, 204, 0));
        searchBtn.setForeground(new java.awt.Color(51, 51, 51));
        searchBtn.setText("Search");
        searchBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        searchBtn.setMargin(new java.awt.Insets(0, 10, 0, 10));
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        dataTbl.setBackground(new java.awt.Color(3, 65, 98));
        dataTbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dataTbl.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        dataTbl.setForeground(new java.awt.Color(255, 255, 255));
        dataTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Rate", "Description", "Estimated Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTbl.setGridColor(new java.awt.Color(204, 204, 255));
        dataTbl.setRowHeight(24);
        dataTbl.setSelectionBackground(new java.awt.Color(255, 204, 0));
        dataTbl.setSelectionForeground(new java.awt.Color(51, 51, 51));
        dataTbl.getTableHeader().setReorderingAllowed(false);
        dataTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(dataTbl);
        if (dataTbl.getColumnModel().getColumnCount() > 0) {
            dataTbl.getColumnModel().getColumn(0).setResizable(false);
            dataTbl.getColumnModel().getColumn(0).setPreferredWidth(20);
            dataTbl.getColumnModel().getColumn(1).setResizable(false);
            dataTbl.getColumnModel().getColumn(1).setPreferredWidth(60);
            dataTbl.getColumnModel().getColumn(2).setResizable(false);
            dataTbl.getColumnModel().getColumn(2).setPreferredWidth(30);
            dataTbl.getColumnModel().getColumn(3).setResizable(false);
            dataTbl.getColumnModel().getColumn(3).setPreferredWidth(100);
            dataTbl.getColumnModel().getColumn(4).setResizable(false);
            dataTbl.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        javax.swing.GroupLayout tblPnlLayout = new javax.swing.GroupLayout(tblPnl);
        tblPnl.setLayout(tblPnlLayout);
        tblPnlLayout.setHorizontalGroup(
            tblPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tblPnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tblPnlLayout.setVerticalGroup(
            tblPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tblPnlLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        dataPnl.setBackground(new java.awt.Color(3, 65, 98));

        itemNameTxtField.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Name"));

        addBtn.setBackground(new java.awt.Color(255, 204, 0));
        addBtn.setForeground(new java.awt.Color(51, 51, 51));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(51, 51, 51));
        updateBtn.setForeground(new java.awt.Color(255, 204, 0));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 204, 0));
        deleteBtn.setForeground(new java.awt.Color(51, 51, 51));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        rateTxtField.setBorder(javax.swing.BorderFactory.createTitledBorder("Rate"));
        rateTxtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rateTxtFieldKeyPressed(evt);
            }
        });

        descriptionTxtField.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));

        timeTxtField.setBorder(javax.swing.BorderFactory.createTitledBorder("Estimated TIme"));

        itemCodeTxtField.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Code"));
        itemCodeTxtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemCodeTxtFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout dataPnlLayout = new javax.swing.GroupLayout(dataPnl);
        dataPnl.setLayout(dataPnlLayout);
        dataPnlLayout.setHorizontalGroup(
            dataPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPnlLayout.createSequentialGroup()
                .addGroup(dataPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataPnlLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(dataPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dataPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(itemNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(itemCodeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(descriptionTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(dataPnlLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(timeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dataPnlLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        dataPnlLayout.setVerticalGroup(
            dataPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemCodeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(itemNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(rateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(dataPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout mainPnlLayout = new javax.swing.GroupLayout(mainPnl);
        mainPnl.setLayout(mainPnlLayout);
        mainPnlLayout.setHorizontalGroup(
            mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPnlLayout.createSequentialGroup()
                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(categoryLbl)
                        .addGap(28, 28, 28)
                        .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn)
                        .addGap(34, 34, 34))
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addGap(240, 240, 240)
                                .addComponent(userLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(managerRadioBtn)
                                .addGap(43, 43, 43)
                                .addComponent(staffRadioBtn))
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addComponent(tblPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dataPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addGap(425, 425, 425)
                                .addComponent(addressNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPnlLayout.createSequentialGroup()
                                .addGap(373, 373, 373)
                                .addComponent(mainNameLbl)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPnlLayout.setVerticalGroup(
            mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPnlLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mainNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addressNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerRadioBtn)
                    .addComponent(staffRadioBtn)
                    .addComponent(userLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryLbl)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(dataPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPnlLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tblPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //method to add row in the table
    private void tableRowWriter(String[] itemsData){
        DefaultTableModel table = (DefaultTableModel) dataTbl.getModel();
        table.addRow(itemsData);
    }
    
    //method to clear the textField 
    private void textFieldClear(javax.swing.JTextField TxtFieldName){
        TxtFieldName.setText("");
    }
    
    //a single method that clears all the TextField
    private void clear(){
        textFieldClear(itemCodeTxtField);
        textFieldClear(itemNameTxtField);
        textFieldClear(rateTxtField);
        textFieldClear(descriptionTxtField);
        textFieldClear(timeTxtField);
    }
    
    //method to split the "." in the .txt file and write the row in the Table
    private void splitAndWrite(String a){
        String[] lineData = a.split("\\.");
        tableRowWriter(lineData);
    }
    
    private void dataTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTblMouseClicked
        int selectedRow = dataTbl.getSelectedRow(); // get values from seletced row
        // displays the data in respective text fields
        itemCodeTxtField.setText((String) dataTbl.getValueAt(selectedRow, 0));
        itemNameTxtField.setText((String)dataTbl.getValueAt(selectedRow, 1));
        rateTxtField.setText((String) dataTbl.getValueAt(selectedRow, 2));
        descriptionTxtField.setText((String)dataTbl.getValueAt(selectedRow, 3));
        timeTxtField.setText((String) dataTbl.getValueAt(selectedRow, 4));
    }//GEN-LAST:event_dataTblMouseClicked
    
    // method to add an item in the table
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //get values from text field
        String itemCode = itemCodeTxtField.getText();
        String itemName = itemNameTxtField.getText();
        String rate = rateTxtField.getText();
        String time = timeTxtField.getText();
        int flag = 0;
        boolean flags=true;
        // VALIDATING ENTERD DESCRIPTION
        String description = "";
        if(descriptionTxtField.getText().equalsIgnoreCase("Starter")){
            description="Starter";
        }else if(descriptionTxtField.getText().equalsIgnoreCase("Main Course")){
            description="Main Course";
        }else if(descriptionTxtField.getText().equalsIgnoreCase("Vibes Special")){
            description="Vibes Special";
        }else if(descriptionTxtField.getText().equalsIgnoreCase("Desert")){
            description="Desert";
        }else if(descriptionTxtField.getText().equalsIgnoreCase("Beverages")){
            description="Beverages";
        }
        else{
            flags=false;
        }
        if(flags==true){
            String[] itemsData = {itemCode, itemName, rate, description, time}; // store elements in an string array
            if(itemCode.isEmpty() || itemName.isEmpty() || rate.isEmpty() || description.isEmpty()|| time.isEmpty()){
                JOptionPane.showMessageDialog(null, "Please fill all the fields!", "Alert", JOptionPane.INFORMATION_MESSAGE); // if anyone of textField is empty, show message
            }                                   
            else{
                flag=itemCheck(itemCode);
                if (flag==1){
                    tableRowWriter(itemsData); 
                    JOptionPane.showMessageDialog(null, "Data successfully added!", "Alert", JOptionPane.INFORMATION_MESSAGE); // messaage of data added
                    clear();
                }else{
                    JOptionPane.showMessageDialog(null, "Item already exists", "Alert", JOptionPane.INFORMATION_MESSAGE); //if item code already exist, message
                }
            }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Invalid Description entered", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBtnActionPerformed
    
    //method to update details of an item
    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        //get values from textfields
        String itemCode = itemCodeTxtField.getText();
        String itemName = itemNameTxtField.getText();
        String rate = rateTxtField.getText();
        boolean flags=true;
        String description = "";
        //VALIDATION ENTERED DESCRIPTION
        if(descriptionTxtField.getText().equalsIgnoreCase("Starter")){
            description="Starter";
        }else if(descriptionTxtField.getText().equalsIgnoreCase("Main Course")){
            description="Main Course";
        }else if(descriptionTxtField.getText().equalsIgnoreCase("Vibes Special")){
            description="Vibes Special";
        }else if(descriptionTxtField.getText().equalsIgnoreCase("Desert")){
            description="Desert";
        }else if(descriptionTxtField.getText().equalsIgnoreCase("Beverages")){
            description="Beverages";
        }
        else{
            flags=false;
        }
        if(flags==true){
            String time = timeTxtField.getText();
            int flag = 0;
            String[] itemsData = {itemCode, itemName, rate, description, time}; // stores elements in an string array
            int index = dataTbl.getSelectedRow();  // get index from selected items             

            if(itemCode.isEmpty() || itemName.isEmpty() || rate.isEmpty() || description.isEmpty()|| time.isEmpty()){
                JOptionPane.showMessageDialog(rootPane, "Please fill all the fields!", "Alert", JOptionPane.INFORMATION_MESSAGE);  // if anyone of textField is empty, show message
            }                                   
            else{
                flag=itemCheck(itemCode); // method returns 1 or 0
                if (flag==1){
                    for (int j = 0; j <= 4; j++){ // five iterations for five columns
                    dataTbl.setValueAt(itemsData[j], index, j); 
                    }
                    JOptionPane.showMessageDialog(rootPane, "Data successfully updated!", "Alert", JOptionPane.INFORMATION_MESSAGE);  // messaage of data updated                
                    clear();// to clear text fields after updating the data to tables
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Food already exists", "Error", JOptionPane.ERROR_MESSAGE); //if item code already exist, message
                }
            } 
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Invalid Description entered", "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_updateBtnActionPerformed
    
    //method to check if the item code already exists during add or update
    public int itemCheck(String itemCode){
        addArrayListItem(); //method call
        boolean flag=false;
            for(int i=0;i<codeArray.size();i++){
                if(Integer.parseInt(itemCode)==codeArray.get(i)){
                    flag=true;
                    break;
                }
                else{
                    flag=false;
                }
            }
            if(!flag){
                return 1;
            }else{
                return 0;
            }
    }
    
    //method to delete a particular item
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int index = dataTbl.getSelectedRow(); // get selected row number
        if(managerRadioBtn.isSelected()){
            DefaultTableModel model = (DefaultTableModel)dataTbl.getModel();
            model.removeRow(index); // remove row in by index
            JOptionPane.showMessageDialog(null, "Row Succesfully Deleted!", "Alert", JOptionPane.INFORMATION_MESSAGE); // deleted message                     
            clear();
        }
        else{
            JOptionPane.showMessageDialog(null, "Unauthorized Action.Please Login as Manager", "Alert", JOptionPane.ERROR_MESSAGE); //message of staff member cannot delete                    
        }
    }//GEN-LAST:event_deleteBtnActionPerformed
    
    // method to open .txt file that has the details of items
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        if(checker==0){
            try {
                File file = new File("itemsOrderRecords.txt"); //read file
                Scanner scanner = new Scanner(file);
                   checker++;
                while (scanner.hasNextLine()){
                    String a = scanner.nextLine();
                    splitAndWrite(a);  
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(rootPane, "File not found.Please check the path", "No File", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "File already imported", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    //method to store column data in arraylists
    public void addArrayListItem(){
        descArray.clear();
        for (int i=0;i<dataTbl.getRowCount();i++){
            codeArray.add(Integer.parseInt((String) dataTbl.getValueAt(i,0)));
            nameArray.add((String) dataTbl.getValueAt(i,1));
            priceArray.add(Integer.parseInt((String) dataTbl.getValueAt(i,2)));
            descArray.add((String) dataTbl.getValueAt(i,3));
            timeArray.add((String) dataTbl.getValueAt(i,4));
            
        }
    }
    
    //search button action performed to search with price
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        addArrayListItem(); // method call
        sortArray(priceArray); //method call
        int low = 0;
        int high = priceArray.size();
        try{
            int val = Integer.parseInt(searchTxtFld.getText());
            int output = binSearch(priceArray, low, high-1, val);

            if(output == -1){
                JOptionPane.showMessageDialog(rootPane, "No Food found on that price", "Error", JOptionPane.ERROR_MESSAGE); // if not found display message
            }else{
                itemfound(val); // found, method call
            }   
        }catch(HeadlessException | NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane,"Please enter price to be searched","Empty Field",JOptionPane.ERROR_MESSAGE);        
        }
    }  
    
    //method for if the value is found
    public void itemfound(int val){
        ArrayList<Integer> priceArray2=new ArrayList<>(); //new array creation for price column
        for (int i=0;i<dataTbl.getRowCount();i++){
            priceArray2.add(Integer.parseInt((String) dataTbl.getValueAt(i,2)));  // insertion of values
        }
        for(int i=0;i<priceArray2.size();i++){
            if(val==priceArray2.get(i)){  // if value is equal to array element
                dataTbl.setRowSelectionInterval(i, i);  
            }
        }
        int row=dataTbl.getSelectedRow();
        String s="Food ID:"+dataTbl.getModel().getValueAt(row, 0).toString()+"\n"
                +"Food Name:"+dataTbl.getModel().getValueAt(row, 1).toString()+"\n"
                +"Price:"+dataTbl.getModel().getValueAt(row, 2).toString()+"\n"
                +"Description:"+dataTbl.getModel().getValueAt(row, 3).toString()+"\n"
                +"Estimated Time:"+dataTbl.getModel().getValueAt(row, 4).toString();
        JOptionPane.showMessageDialog(rootPane,s,"Found",JOptionPane.INFORMATION_MESSAGE);
        
        
    }
    
    //method for  binary search algorithm
    public int binSearch(ArrayList a,int low,int high,int val){
        if(low<=high){  // condition to check low value is lower or equal with high value
            int mid =low + (high-low)/2;
            if(Integer.parseInt(a.get(mid).toString()) == val){ // check mid is equal to value
                return mid;
            }else if(val< Integer.parseInt(a.get(mid).toString())){ //check value is less than mid value
                return binSearch(a, low, mid-1, val);
            }else{
                return binSearch(a, mid+1, high, val);
            }
        }else{
            return -1;
        }
    
    }
    // method for selection sort
    public void sortArray(ArrayList<Integer> priceArray){ // array list passed as parameters
          for(int i=0;i<priceArray.size();i++){
            int minIndex=i; // min index set i
            for(int j=i+1;j<priceArray.size();j++){
                if (priceArray.get(j)<priceArray.get(minIndex)){  // comparision of j with the min index
                    minIndex=j;  // return new min index
                }
            }
            int temp= priceArray.get(minIndex);  // min index stored in a int reference variable
            priceArray.set(minIndex,priceArray.get(i));
            priceArray.set(i,temp);
          }
    }//GEN-LAST:event_searchBtnActionPerformed
    
    //method to delete the text present when clicked in the TextField
    private void Mou(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Mou
        searchTxtFld.setText("");
    }//GEN-LAST:event_Mou
    
    //action listener of the combo box
    private void categoryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboActionPerformed
        // method called which creates array of each column in the table

        addArrayListItem();
        ArrayList<Integer> got=new ArrayList<>();  // new array to store the returned value
        
        String seleIndex=(categoryCombo.getSelectedItem()).toString();
            if(seleIndex.equalsIgnoreCase("Main Course") ){  // condition which checks selected catagory 
                got=Linearsearch(descArray,seleIndex); // linear search method called
                
            }
            else if(seleIndex.equalsIgnoreCase("Vibes Special") ){  // condition which checks selected catagory 
                got=Linearsearch(descArray, seleIndex); // linear search method called
                
            }
            else if(seleIndex.equalsIgnoreCase("Desert") ){   // condition which checks selected catagory 
                got=Linearsearch(descArray, seleIndex); // linear search method called
                
            }
            else if(seleIndex.equalsIgnoreCase("Beverages") ){  // condition which checks selected catagory 
                got=Linearsearch(descArray, seleIndex); // linear search method called
            }
            else if(seleIndex.equalsIgnoreCase("Starter") ){  // condition which checks selected catagory 
                got=Linearsearch(descArray, seleIndex); // linear search method called
            }
            found(got);      
    }//GEN-LAST:event_categoryComboActionPerformed

    // method to exit the GUI to when Exit menu item is clicked
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        JFrame frame = new JFrame("EXIT");
        if(JOptionPane.showConfirmDialog(frame, "Confirm if you want to Exit!!", "EXIT",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) // conformation for exiting
        {
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    //method to display help document in a different frame when help menuitem is clicked
    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        
        try { 
            File file = new File("helpFile.pdf"); 
            Desktop desk = Desktop.getDesktop(); 
            desk.open(file); 
            
        } catch (Exception e) { 
            JOptionPane.showMessageDialog(rootPane,"Please check the name of the file","Error",JOptionPane.ERROR_MESSAGE); 
        } 
    }//GEN-LAST:event_helpMenuItemActionPerformed

    //method to allow user enter only number in Text Field
    private void searchTxtFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTxtFldKeyPressed
        // TODO add your handling code here:                                       
         char c=evt.getKeyChar();
        if(Character.isDigit(c)||(c==evt.VK_BACK_SPACE)||(c==evt.VK_DELETE)){ //allowing backspace and delete to run
            searchTxtFld.setEditable(true);
        }else{
            searchTxtFld.setEditable(false);
        }
    }//GEN-LAST:event_searchTxtFldKeyPressed

    //method to allow user enter only number in Text Field
    private void itemCodeTxtFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemCodeTxtFieldKeyPressed
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||(c==evt.VK_DELETE)){    //allowing backspace and delete to run
            itemCodeTxtField.setEditable(true);
        }else{
            itemCodeTxtField.setEditable(false);
        }
    }//GEN-LAST:event_itemCodeTxtFieldKeyPressed
 
    
    //method to allow user enter only number in Text Field
    private void rateTxtFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateTxtFieldKeyPressed
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if(Character.isDigit(c)||(c==evt.VK_BACK_SPACE)||(c==evt.VK_DELETE)){    //allowing backspace and delete to run
            rateTxtField.setEditable(true);
        }else{
            rateTxtField.setEditable(false);
        }
    }//GEN-LAST:event_rateTxtFieldKeyPressed
    
    //method for linear search algorithm 
    public ArrayList Linearsearch(ArrayList<String> a, String b){
        ArrayList<Integer> arr=new ArrayList<>(); // array to store the idex of match
        arr.clear();
        for(int i=0;i<a.size();i++){  
            if(a.get(i).equalsIgnoreCase(b)){  // condtition to check the matched elements
                arr.add(i);  // the index of match stored in an array
            }
        }
        return arr;
        
    } 
    
    // method to display the food item code and name when searching items based on category 
    public void found(ArrayList<Integer> got){
        String s="The category consists of "+got.size()+" food items"+"\n";
        s=s+"Food ID    "+"Food Name"+"\n";
        for(int i=0;i<got.size();i++){
            s=s+codeArray.get(got.get(i))+"           "+nameArray.get(got.get(i))+"\n";
        }
        JOptionPane.showMessageDialog(rootPane,s,"Found",JOptionPane.INFORMATION_MESSAGE);  // message dialogue box to display the items
     }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RestaurantInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RestaurantInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RestaurantInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RestaurantInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RestaurantInfo().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel addressNameLbl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> categoryCombo;
    private javax.swing.JLabel categoryLbl;
    private javax.swing.JPanel dataPnl;
    private javax.swing.JTable dataTbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField descriptionTxtField;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JTextField itemCodeTxtField;
    private javax.swing.JTextField itemNameTxtField;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel mainNameLbl;
    private javax.swing.JPanel mainPnl;
    private javax.swing.JRadioButton managerRadioBtn;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTextField rateTxtField;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTxtFld;
    private javax.swing.JRadioButton staffRadioBtn;
    private javax.swing.JPanel tblPnl;
    private javax.swing.JTextField timeTxtField;
    private javax.swing.JButton updateBtn;
    private javax.swing.JLabel userLbl;
    // End of variables declaration//GEN-END:variables
}
